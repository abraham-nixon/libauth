{
  "$ref": "#/definitions/AuthenticationTemplate",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AddressData": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this address data.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this address data.",
          "type": "string"
        },
        "type": {
          "description": "`AddressData` is the most low-level variable type. It must be collected\nand stored each time a script is generated (usually, a locking script).\n`AddressData` can include any type of data, and can be used in any way.\n\nFor more persistent data, use `WalletData`.",
          "enum": [
            "AddressData"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "AuthenticationTemplate": {
      "additionalProperties": false,
      "description": "An `AuthenticationTemplate` (A.K.A. `Bitauth Template`) specifies a set of\nlocking scripts, unlocking scripts, and other information required to use a\ncertain authentication scheme. Templates fully describe wallets and protocols\nin a way that can be shared between software clients.",
      "properties": {
        "$schema": {
          "description": "The URI which identifies the JSON Schema used by this template. Try:\n`https://bitauth.com/schemas/authentication-template-v0.schema.json`\nto enable documentation, autocompletion, and validation in JSON documents.",
          "type": "string"
        },
        "description": {
          "description": "An optionally multi-line, free-form, human-readable description for this\nauthentication template (for use in user interfaces). If displayed, this\ndescription should use a monospace font to properly render ASCII diagrams.",
          "type": "string"
        },
        "entities": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateEntity"
          },
          "description": "A map of entities defined in this authentication template.\n\nObject keys are used as entity identifiers, and by convention, should use\n`snake_case`.",
          "type": "object"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this authentication\ntemplate (for use in user interfaces).",
          "type": "string"
        },
        "scenarios": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateScenario"
          },
          "description": "A scenario describes a context in which one or more scripts might be used.\nScenarios are used for transaction estimation and as an integrated testing\nsystem for authentication templates.\n\nObject keys are used as scenario identifiers, and by convention, should use\n`snake_case`.",
          "type": "object"
        },
        "scripts": {
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/AuthenticationTemplateScript"
              },
              {
                "$ref": "#/definitions/AuthenticationTemplateScriptUnlocking"
              },
              {
                "$ref": "#/definitions/AuthenticationTemplateScriptLocking"
              },
              {
                "$ref": "#/definitions/AuthenticationTemplateScriptTested"
              }
            ]
          },
          "description": "A map of scripts used in this authentication template.\n\nObject keys are used as script identifiers, and by convention, should use\n`snake_case`.",
          "type": "object"
        },
        "supported": {
          "description": "A list of authentication virtual machine versions supported by this\ntemplate.\n\nVirtual machine identifiers use the format `CODE_YYYY_MM`, where `CODE` is\nthe currency code used to identify the network, and `YYYY_MM` is the year\nand month in which the specified VM version became active on the indicated\nnetwork.\n\nIdentifiers with the `_SPEC` suffix indicate that this template is intended\nfor compatibility with a future virtual machine version, but at the time\nthe template was create, that virtual machine had not yet become active on\nthe specified chain.\n\nThe earliest possible `_SPEC` virtual machine version is `BCH_2020_11_SPEC`,\nthe first virtual machine version after the public release of the version `0`\nAuthenticationTemplate format.",
          "items": {
            "$ref": "#/definitions/AuthenticationVirtualMachineIdentifier"
          },
          "type": "array"
        },
        "version": {
          "description": "A number identifying the format of this AuthenticationTemplate.\nCurrently, this implementation requires `version` be set to `0`.",
          "enum": [
            0
          ],
          "type": "number"
        }
      },
      "required": [
        "entities",
        "scripts",
        "supported",
        "version"
      ],
      "type": "object"
    },
    "AuthenticationTemplateEntity": {
      "additionalProperties": false,
      "description": "An object describing the configuration for a particular entity within an\nauthentication template.",
      "properties": {
        "description": {
          "description": "An optionally multi-line, free-form, human-readable description for this\nentity (for use in user interfaces). If displayed, this description\nshould use a monospace font to properly render ASCII diagrams.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this entity for use in\nuser interfaces and error messages, e.g.: `Trusted Third-Party`.",
          "type": "string"
        },
        "scripts": {
          "description": "An array of the identifiers of each script the entity must be capable of\ngenerating, e.g. each of the unlocking scripts this entity might use.\n\nProvided the necessary variables, any entity can construct any script, but\nthis option allows us to hint to more advanced wallets which scripts to\nrecommend to users. (Especially when many scripts require inter-entity\ncommunication initiated by a user.)\n\nIf not provided, this property is assumed to include all scripts in the\ntemplate.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "variables": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateVariable"
          },
          "description": "A map of variables which must be provided by this entity for use in the\ntemplate's scripts. Some variables are required before locking script\ngeneration, while some variables can or must be resolved only before\nunlocking script generation.\n\nObject keys are used as variable identifiers, and by convention, should use\n`snake_case`.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "AuthenticationTemplateScenario": {
      "additionalProperties": false,
      "description": "An object describing the configuration for a particular scenario within an\nauthentication template.",
      "properties": {
        "data": {
          "$ref": "#/definitions/AuthenticationTemplateScenarioData",
          "description": "An object defining the data to use while compiling this scenario. The\nproperties specified here are used to extend the existing scenario data\nbased on this scenario's `extends` property.\n\nEach property is extended individually – to unset a previously-set\nproperty, the same property must be specified here as `undefined`."
        },
        "description": {
          "description": "An optionally multi-line, free-form, human-readable description for this\nscenario (for use in user interfaces). If displayed, this description\nshould use a monospace font to properly render ASCII diagrams.",
          "type": "string"
        },
        "extends": {
          "description": "The identifier of the scenario which this scenario extends. Any `data` or\n`transaction` properties not defined in this scenario inherit from this\nparent scenario.\n\nIf undefined, this scenario is assumed to extend the default scenario:\n\n- The default values for `data` are set:\n   - The identifiers of all `Key` and `HdKey` variable in this template are\nlexicographically sorted, then each is assigned an incrementing positive\ninteger – beginning with `1` – encoded as an unsigned, 256-bit, big-endian\ninteger (i.e. `0x0000...0001` (32 bytes), `0x0000...0002`, `0x0000...0003`,\netc.). This assigned value is used as the private key for `Key`s and the\nmaster seed for `HdKey`s.\n   - `currentBlockHeight` is set to `2`. This is the height of the second\nmined block after the genesis block:\n`000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd`. This\ndefault value was chosen to be low enough to simplify the debugging of\nblock height offsets while remaining differentiated from `0` and `1` which\nare used both as boolean return values and for control flow.\n   - `currentBlockTime` is set to `1231469665`. This is the Median Time-Past\nblock time (BIP113) of block `2`.\n\n- Then `transaction` is set based on use:\n   - if the scenario is being used for transaction estimation, all\ntransaction properties are taken from the transaction being estimated.\n   - if the scenario is being used for script testing and validation, the\ndefault scenario `transaction` values are used:\n   - `inputs` is set to `[{ \"unlockingBytecode\": true }]`\n   - `locktime` is set to `0`\n   - `outputs` is set to `[{}]`\n   - `version` is set to `2`\n\nWhen a scenario is extended, each property of `data` and `transaction` is\nextended individually: if the extending scenario does not provide a new\nvalue for `data.bytecode.value` or `transaction.property`, the parent value\nis used. To avoid inheriting a parent value, each child value must be set\nto `undefined`.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this scenario for use in\nuser interfaces, e.g.: `Delayed Recovery`.",
          "type": "string"
        },
        "transaction": {
          "additionalProperties": false,
          "description": "The transaction within which this scenario should be evaluated. This is\nused for script testing and validation.\n\nIf undefined, inherits the default scenario value:\n```json\n{\n   \"inputs\": [{ \"unlockingBytecode\": true }],\n   \"locktime\": 0,\n   \"outputs\": [{}],\n   \"version\": 2\n}\n```\n\nAny `transaction` property which is not set will be inherited from the\nscenario specified by `extends`. when specifying the `inputs` and `outputs`\nproperties, each input and output extends the default values for inputs and\noutputs, respectively.\n\nFor example, an input of `{}` is interpreted as:\n```json\n{\n   \"outpointIndex\": 0,\n   \"outpointTransactionHash\":\n     \"0000000000000000000000000000000000000000000000000000000000000000\",\n   \"sequenceNumber\": 0\n}\n```\nAnd an output of `{}` is interpreted as:\n```json\n{\n   \"lockingBytecode\": { \"overrides\": { \"hdKeys\": { \"addressIndex\": 1 } } },\n   \"satoshis\": 0\n}\n```",
          "properties": {
            "inputs": {
              "description": "The list of inputs to use when generating the transaction context for\nthis scenario.\n\nTo be valid the `inputs` property must have exactly one input with\n`unlockingBytecode` set to `true`. This is the input in which the\nunlocking script under test will be placed. No other inputs may define\n`unlockingBytecode`.\n\nIf undefined, inherits the default scenario `inputs` value:\n`[{ \"unlockingBytecode\": true }]`.",
              "items": {
                "$ref": "#/definitions/AuthenticationTemplateScenarioInput"
              },
              "type": "array"
            },
            "locktime": {
              "description": "The locktime to use when generating the transaction context for this\nscenario. A positive integer from `0` to a maximum of `4294967295` – if\nundefined, inherits the default scenario `locktime` value: `0`.\n\nLocktime can be provided as either a timestamp or a block height. Values\nless than `500000000` are understood to be a block height (the current\nblock number in the chain, beginning from block `0`). Values greater than\nor equal to `500000000` are understood to be a UNIX timestamp.\n\nFor validating timestamp values, the median timestamp of the last 11\nblocks (Median Time-Past) is used. The precise behavior is defined in\nBIP113.\n\nIf the `sequenceNumber` of every transaction input is set to `0xffffffff`\n(`4294967295`), locktime is disabled, and the transaction may be added to\na block even if the specified locktime has not yet been reached. When\nlocktime is disabled, if an `OP_CHECKLOCKTIMEVERIFY` operation is\nencountered during the verification of any input, an error is produced,\nand the transaction is invalid.",
              "type": "number"
            },
            "outputs": {
              "description": "The list of outputs to use when generating the transaction context for\nthis scenario.\n\nIf undefined, inherits the default scenario `outputs` value: `[{}]`.",
              "items": {
                "$ref": "#/definitions/AuthenticationTemplateScenarioOutput"
              },
              "type": "array"
            },
            "version": {
              "description": "The version to use when generating the transaction context for this\nscenario. A positive integer from `0` to a maximum of `4294967295` – if\nundefined, inherits the default scenario `version` value: `2`.",
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "AuthenticationTemplateScenarioData": {
      "additionalProperties": false,
      "description": "An object defining the data to use while compiling a scenario.",
      "properties": {
        "bytecode": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of full identifiers to scripts which compile to their values in this\nscenario. Scripts are provided in BTL, and have access to all other\ntemplate scripts and variables. (However, cyclical references will produce\nan error at compile time.)\n\nThe provided `fullIdentifier` should match the complete identifier for\neach item, e.g. `some_wallet_data`, `variable_id.public_key`, or\n`variable_id.signature.all_outputs`.\n\nAll `AddressData` and `WalletData` variables must be provided via\n`bytecode`, and pre-computed results for operations of other variable types\n(e.g. `key.public_key`) may also be provided via this property.",
          "type": "object"
        },
        "currentBlockHeight": {
          "description": "The current block height at the \"address creation time\" implied in this\nscenario.",
          "type": "number"
        },
        "currentBlockTime": {
          "additionalProperties": false,
          "description": "The current block time at the \"address creation time\" implied in this\nscenario.\n\nNote: this is never a current timestamp, but the median timestamp of the\nlast 11 blocks. This value only changes when a new block is found. See\nBIP113 for details.",
          "type": "object"
        },
        "hdKeys": {
          "additionalProperties": false,
          "description": "An object describing the settings used for `HdKey` variables in this\nscenario.",
          "properties": {
            "addressIndex": {
              "description": "The current address index to be used for this scenario. The\n`addressIndex` gets added to each `HdKey`s `addressOffset` to calculate\nthe dynamic index (`i`) used in each `privateDerivationPath` or\n`publicDerivationPath`.\n\nThis is required for any compiler operation which requires derivation.\nTypically, the value is incremented by one for each address in a wallet.",
              "type": "number"
            },
            "hdPrivateKeys": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of entity IDs to master HD private keys. These master HD private\nkeys are used to derive each `HdKey` variable assigned to that entity\naccording to its `privateDerivationPath`.\n\nHD private keys may be encoded for either mainnet or testnet (the network\ninformation is ignored).\n\nIf both an HD private key (in `hdPrivateKeys`) and HD public key (in\n`hdPublicKeys`) are provided for the same entity in the same scenario\n(not recommended), the HD private key is used.",
              "type": "object"
            },
            "hdPublicKeys": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of entity IDs to HD public keys. These HD public keys are used to\nderive public keys for each `HdKey` variable assigned to that entity\naccording to its `publicDerivationPath`.\n\nHD public keys may be encoded for either mainnet or testnet (the network\ninformation is ignored).\n\nIf both an HD private key (in `hdPrivateKeys`) and HD public key (in\n`hdPublicKeys`) are provided for the same entity in the same scenario\n(not recommended), the HD private key is used.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "keys": {
          "additionalProperties": false,
          "description": "An object describing the settings used for `Key` variables in this\nscenario.",
          "properties": {
            "privateKeys": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of `Key` variable IDs to scripts defining their values in this\nscenario. Scripts are provided in BTL, and have access to all other\ntemplate scripts and variables. (However, cyclical references will\nproduce an error at compile time.)",
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "AuthenticationTemplateScenarioInput": {
      "additionalProperties": false,
      "description": "An example input used to define a scenario for an authentication template.",
      "properties": {
        "outpointIndex": {
          "description": "The index of the output in the transaction from which this input is spent.\n\nIf undefined, this defaults to `0`.",
          "type": "number"
        },
        "outpointTransactionHash": {
          "description": "A 32-byte hexadecimal-encoded hash of the transaction from which this input\nis spent in big-endian byte order. This is the byte order typically seen in\nblock explorers and user interfaces (as opposed to little-endian byte\norder, which is used in standard P2P network messages).\n\nIf undefined, this defaults to the \"empty\" hash:\n`0000000000000000000000000000000000000000000000000000000000000000`\n\nA.K.A. Outpoint `Transaction ID`",
          "type": "string"
        },
        "sequenceNumber": {
          "description": "The positive, 32-bit unsigned integer used as the \"sequence number\" for\nthis input.\n\nIf undefined, this defaults to `0`.",
          "type": "number"
        },
        "unlockingBytecode": {
          "description": "A boolean value indicating that this input contains the `unlockingBytecode`\nunder test by this scenario. This defaults to `undefined`.\n\nFor a scenario to be valid, this property must be `true` for exactly one\ninput in that scenario.",
          "enum": [
            true
          ],
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AuthenticationTemplateScenarioOutput": {
      "additionalProperties": false,
      "description": "An example output used to define a scenario for an authentication template.",
      "properties": {
        "lockingBytecode": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "additionalProperties": false,
              "properties": {
                "overrides": {
                  "$ref": "#/definitions/AuthenticationTemplateScenarioData",
                  "description": "Scenario data which extends this scenario's top-level data during\nscript compilation.\n\nEach property is extended individually – to unset a property set by\nthe top-level scenario data, the same property must be specified here\nas `undefined`.\n\nIf undefined, defaults to `{ \"hdKeys\": { \"addressIndex\": 1 } }`."
                },
                "script": {
                  "description": "The identifier of the script to compile when generating this\n`lockingBytecode`.\n\nIf undefined, defaults to the locking script unlocked by the\nunlocking script under test.",
                  "type": "string"
                }
              },
              "required": [
                "overrides"
              ],
              "type": "object"
            }
          ],
          "description": "The bytecode used to encumber this transaction output. To spend the output,\nunlocking bytecode must be included in a transaction input which – when\nevaluated before the locking bytecode – completes in a valid state.\n\nA.K.A. `scriptPubKey` or \"locking script\"\n\nIf undefined, this defaults to `{}`, which uses the default values for\n`script` and `overrides`, respectively."
        },
        "satoshis": {
          "description": "The value of the output in satoshis, the smallest unit of bitcoin.\n\nIn a valid transaction, this is a positive integer, from `0` to the maximum\nnumber of satoshis available to the transaction.\n\nThe maximum number of satoshis in existence is about 1/4 of\n`Number.MAX_SAFE_INTEGER` (`9007199254740991`), so typically, this value\nis defined using a `number`. However, this value may also be defined using\na 16-character, hexadecimal-encoded `string`, to allow for the full range\nof the 64-bit unsigned, little-endian integer used to serialized `satoshis`\nin the serialized output format, e.g. `\"ffffffffffffffff\"`. This is useful\nfor representing scenarios where intentionally excessive values are\nprovided (to ensure an otherwise properly-signed transaction can never be\nincluded in the blockchain), e.g. transaction size estimations or off-chain\nBitauth signatures.\n\nIf undefined, this defaults to: `0`.",
          "type": [
            "number",
            "string"
          ]
        }
      },
      "type": "object"
    },
    "AuthenticationTemplateScript": {
      "additionalProperties": false,
      "description": "An object describing the configuration for a particular script within an\nauthentication template.",
      "properties": {
        "name": {
          "description": "A single-line, human-readable name for this script (for use in user\ninterfaces).",
          "type": "string"
        },
        "script": {
          "description": "The script definition in BTL (Bitauth Templating Language).",
          "type": "string"
        }
      },
      "required": [
        "script"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptLocking": {
      "additionalProperties": false,
      "properties": {
        "lockingType": {
          "description": "Indicates if P2SH infrastructure should be used when producing bytecode\nrelated to this script. For more information on P2SH, see BIP16.\n\nWhen compiling locking scripts of type `p2sh`, the result will be placed in\na P2SH \"redeem script\" format:\n`OP_HASH160 <$(<lockingBytecode> OP_HASH160)> OP_EQUAL`\n\nWhen compiling unlocking scripts which unlock locking scripts of type\n`p2sh`, the result will be transformed into the P2SH unlocking format:\n`unlockingBytecode <lockingBytecode>` (where `lockingBytecode` is the\ncompiled bytecode of the locking script, without the \"redeem script\"\ntransformation.)\n\nThe presence of the `lockingType` property indicates that this script is a\nlocking script. It must be present on any script referenced by the\n`unlocks` property of another script.",
          "enum": [
            "standard",
            "p2sh"
          ],
          "type": "string"
        },
        "name": {
          "description": "A single-line, human-readable name for this script (for use in user\ninterfaces).",
          "type": "string"
        },
        "script": {
          "description": "The script definition in BTL (Bitauth Templating Language).",
          "type": "string"
        }
      },
      "required": [
        "lockingType",
        "script"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptTest": {
      "additionalProperties": false,
      "properties": {
        "check": {
          "description": "The script to evaluate after the script being tested. The test passes if\nthis script leaves only a 1 (ScriptNumber) on the stack.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this test (for use in\nuser interfaces).",
          "type": "string"
        },
        "scenario": {
          "description": "The identifier of the scenario which should be used when evaluating this\ntest. If undefined, the default scenario will be used, so only `Key` and\n`HdKey` variables will be provided.",
          "type": "string"
        },
        "setup": {
          "description": "A script to evaluate before the script being tested. This can be used to\npush values to the stack which are operated on by the inline script.",
          "type": "string"
        }
      },
      "required": [
        "check"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptTested": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "A single-line, human-readable name for this script (for use in user\ninterfaces).",
          "type": "string"
        },
        "script": {
          "description": "The script definition in BTL (Bitauth Templating Language).",
          "type": "string"
        },
        "tests": {
          "description": "One or more tests which can be used during development and during template\nvalidation to confirm the correctness of this inline script.",
          "items": {
            "$ref": "#/definitions/AuthenticationTemplateScriptTest"
          },
          "type": "array"
        }
      },
      "required": [
        "script",
        "tests"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptUnlocking": {
      "additionalProperties": false,
      "properties": {
        "ageLock": {
          "description": "TODO: not yet implemented\n\nThe minimum input age required for this unlocking script to become valid.\n\nThis value is provided as a BTL script which must compile to the least\nsignificant 3 bytes of the minimum sequence number required for this\nunlocking script to be valid (the \"type bit\" and the 2-byte \"value\" – see\nBIP68 for details). This script has access to all other template scripts\nand variables, but cyclical references will produce an error at compile\ntime.\n\nIn supporting wallets, this value can be computed at address creation\ntime, and the remaining time for which any UTXO remains \"age-locked\" can be\ndisplayed in user interfaces (by parsing the \"type bit\" and \"value\" as\ndescribed in BIP68).\n\nNote, because the precise value used by `OP_CHECKSEQUENCEVERIFY` can be\nprovided in the unlocking script, it is trivial to create an unlocking\nscript for which a proper value for `ageLock` is not possible to determine\nuntil the spending transaction is prepared. These cases are intentionally\nout-of-scope for this property. Instead, `ageLock` should only be used\nfor unlocking scripts where the expected value can be compiled at address\ncreation time.",
          "type": "string"
        },
        "estimate": {
          "description": "The identifier of the scenario to use for this unlocking script when\ncompiling an estimated transaction.\n\nUsing estimate scenarios, it's possible for wallet software to compute\nan \"estimated transaction\", an invalid transaction which is guaranteed to\nbe the same byte length as the final transaction. This length can be used\nto calculate the required transaction fee and assign values to the\ntransaction's change output(s). Because estimate scenarios provide\n\"estimated\" values for all variables, this estimation can be done by a\nsingle entity without input from other entities.\n\nIf not provided, the default scenario will be used for estimation. The\ndefault scenario only provides values for each `Key` and `HdKey` variable,\nso compilations requiring other variables will produce errors. See\n`AuthenticationTemplateScenario.extends` for details.",
          "type": "string"
        },
        "fails": {
          "description": "A list of the scenario identifiers which – when used to compile this\nunlocking script and the script it unlocks – result in an\n`unlockingBytecode` which fails program verification.\n\nThese scenarios can be used to test this script in development and review.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "A single-line, human-readable name for this script (for use in user\ninterfaces).",
          "type": "string"
        },
        "passes": {
          "description": "A list of the scenario identifiers which – when used to compile this\nunlocking script and the script it unlocks – result in an\n`unlockingBytecode` which passes program verification.\n\nThese scenarios can be used to test this script in development and review.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "script": {
          "description": "The script definition in BTL (Bitauth Templating Language).",
          "type": "string"
        },
        "timeLockType": {
          "description": "The expected type of time locks in this script.\n\nBecause `OP_CHECKLOCKTIMEVERIFY` reads from a transaction's `locktime`\nproperty, every input to a given transaction must share the same time lock\ntype. This differs from `OP_CHECKSEQUENCEVERIFY` in that each input has its\nown `sequenceNumber`, so compatibility is not required.\n\nIf a transaction includes multiple inputs using scripts with `timeLockType`\ndefined, and the types are not compatible, generation should fail.\n\nThe `timestamp` type indicates that the transaction's locktime is provided\nas a UNIX timestamp (the `locktime` value is greater than or equal to\n`500000000`).\n\nThe `height` type indicates that the transaction's locktime is provided as\na block height (the `locktime` value is less than `500000000`).\n\nIf `timeLockType` is undefined, the script is assumed to have no reliance\non absolute time locks.",
          "enum": [
            "timestamp",
            "height"
          ],
          "type": "string"
        },
        "unlocks": {
          "description": "The identifier of the script which can be unlocked by this script.\n\nThe presence of the `unlocks` property indicates that this script is an\nunlocking script, and the script it unlocks must be a locking script.",
          "type": "string"
        }
      },
      "required": [
        "script",
        "unlocks"
      ],
      "type": "object"
    },
    "AuthenticationTemplateVariable": {
      "anyOf": [
        {
          "$ref": "#/definitions/HdKey"
        },
        {
          "$ref": "#/definitions/Key"
        },
        {
          "$ref": "#/definitions/WalletData"
        },
        {
          "$ref": "#/definitions/AddressData"
        }
      ]
    },
    "AuthenticationVirtualMachineIdentifier": {
      "description": "Allowable identifiers for authentication virtual machine versions. The `BCH`\nprefix identifies the Bitcoin Cash network, the `BSV` prefix identifies the\nBitcoin SV network, and the `BTC` prefix identifies the Bitcoin (Core)\nnetwork.",
      "enum": [
        "BCH_2022_11_SPEC",
        "BCH_2022_11",
        "BCH_2022_05_SPEC",
        "BCH_2022_05",
        "BCH_2021_11_SPEC",
        "BCH_2021_11",
        "BCH_2021_05_SPEC",
        "BCH_2021_05",
        "BCH_2020_11_SPEC",
        "BCH_2020_11",
        "BCH_2020_05",
        "BCH_2019_11",
        "BCH_2019_05",
        "BSV_2020_02",
        "BSV_2018_11",
        "BTC_2017_08"
      ],
      "type": "string"
    },
    "HdKey": {
      "additionalProperties": false,
      "properties": {
        "addressOffset": {
          "description": "The offset by which to increment the `addressIndex` provided in the\ncompilation data when deriving this `HdKey`. (Default: 0)\n\nThis is useful for deriving the \"next\" (`1`) or \"previous\" (`-1`) address\nto be used in the current compilation context.",
          "type": "number"
        },
        "description": {
          "description": "A single-line, human readable description for this HD key.",
          "type": "string"
        },
        "hdPublicKeyDerivationPath": {
          "description": "The path to derive the entity's HD public key from the entity's master HD\nprivate key. By default, `m` (i.e. the entity's HD public key represents\nthe same node in the HD tree as its HD private key).\n\nThis can be used to specify another derivation path from which the\n`publicDerivationPath` begins, e.g. `m/0'/1'/2'`. See\n`publicDerivationPath` for details.\n\nThis path must begin with an `m` (private derivation) and be fixed – it\ncannot contain an `i` character to represent the address index, as a\ndynamic hardened path would require a new HD public key for each address.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this HD key.",
          "type": "string"
        },
        "privateDerivationPath": {
          "description": "The derivation path used to derive this `HdKey` from the owning entity's HD\nprivate key. By default, `m/i`.\n\nThis path uses the notation specified in BIP32 and the `i` character to\nrepresent the location of the `addressIndex`:\n\nThe first character must be `m` (private derivation), followed by sets of\n`/` and a number representing the child index used in the derivation at\nthat depth. Hardened derivation is represented by a trailing `'`, and\nhardened child indexes are represented with the hardened index offset\n(`2147483648`) subtracted. The `i` character is replaced with the value of\n`addressIndex` plus this `HdKey`'s `addressOffset`. If the `i` character is\nfollowed by `'`, the hardened index offset is added (`2147483648`) and\nhardened derivation is used.\n\nFor example, `m/0/1'/i'` uses 3 levels of derivation, with child indexes in\nthe following order:\n\n`derive(derive(derive(node, 0), 2147483648 + 1), 2147483648 + addressIndex + addressOffset)`\n\nBecause hardened derivation requires knowledge of the private key, `HdKey`\nvariables with `derivationPath`s which include hardened derivation cannot\nuse HD public derivation (the `hdPublicKeys` property in\n`CompilationData`). Instead, compilation requires the respective HD private\nkey (`CompilationData.hdKeys.hdPrivateKeys`) or the fully-derived public\nkey (`CompilationData.hdKeys.derivedPublicKeys`).",
          "type": "string"
        },
        "publicDerivationPath": {
          "description": "The derivation path used to derive this `HdKey`'s public key from the\nowning entity's HD public key. If not set, the public equivalent of\n`privateDerivationPath` is used. For the `privateDerivationPath` default of\n`m/i`, this is `M/i`.\n\nIf `privateDerivationPath` uses hardened derivation for some levels, but\nlater derivation levels use non-hardened derivation, `publicDerivationPath`\ncan be used to specify a public derivation path beginning from\n`hdPublicKeyDerivationPath` (i.e. `publicDerivationPath` should always be a\nnon-hardened segment of `privateDerivationPath` which follows\n`hdPublicKeyDerivationPath`).\n\nThe first character must be `M` (public derivation), followed by sets of\n`/` and a number representing the child index used in the non-hardened\nderivation at that depth.\n\nFor example, if `privateDerivationPath` is `m/0'/i`, it is not possible to\nderive the equivalent public key with only the HD public key `M`. (The path\n\"`M/0'/i`\" is impossible). However, given the HD public key for `m/0'`, it\nis possible to derive the public key of `m/0'/i` for any `i`. In this case,\n`hdPublicKeyDerivationPath` would be `m/0'` and `publicDerivationPath`\nwould be the remaining `M/i`.",
          "type": "string"
        },
        "type": {
          "description": "The `HdKey` (Hierarchical-Deterministic Key) type automatically manages key\ngeneration and mapping in a standard way. For greater control, use `Key`.",
          "enum": [
            "HdKey"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Key": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this key.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this key.",
          "type": "string"
        },
        "type": {
          "description": "The `Key` type provides fine-grained control over key generation and\nmapping. Most templates should instead use `HdKey`.\n\nAny HD (Hierarchical-Deterministic) derivation must be completed outside of\nthe templating system and provided at the time of use.",
          "enum": [
            "Key"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "WalletData": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this wallet data.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this wallet data.",
          "type": "string"
        },
        "type": {
          "description": "The `WalletData` type provides a static piece of data which should be\ncollected once and stored at the time of wallet creation. `WalletData`\nshould be persistent for the life of the wallet, rather than changing from\nlocking script to locking script.\n\nFor address-specific data, use `AddressData`.",
          "enum": [
            "WalletData"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    }
  }
}