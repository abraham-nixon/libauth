{
  "$ref": "#/definitions/AuthenticationTemplate",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AddressData": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this address data.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this address data.",
          "type": "string"
        },
        "source": {
          "description": "A script ID used to compile this AddressData. When a `source` is provided,\nwallet implementations can automatically compile the expected value without\nprompting users. This is particularly useful for sharing the result of a\nscript with other entities as a variable.\n\nTODO: not yet implemented - also requires support in data_signature",
          "type": "string"
        },
        "type": {
          "description": "`AddressData` is the most low-level variable type. It must be collected\nand stored each time a script is generated (usually, a locking script).\n`AddressData` can include any type of data, and can be used in any way.\n\nFor more persistent data, use `WalletData`.",
          "enum": [
            "AddressData"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "AuthenticationTemplate": {
      "additionalProperties": false,
      "description": "An `AuthenticationTemplate` (A.K.A. `Bitauth Template`) specifies a set of\nlocking scripts, unlocking scripts, and other information required to use a\ncertain authentication scheme. Templates fully describe wallets and protocols\nin a way that can be shared between software clients.",
      "properties": {
        "$schema": {
          "description": "The URI which identifies the JSON Schema used by this template. Try:\n`https://bitauth.com/schemas/authentication-template-v0.schema.json`\nto enable documentation, autocompletion, and validation in JSON documents.",
          "type": "string"
        },
        "description": {
          "description": "An optionally multi-line, free-form, human-readable description for this\nauthentication template (for use in user interfaces). When displayed, this\ndescription should use a monospace font to properly render ASCII diagrams.",
          "type": "string"
        },
        "entities": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateEntity"
          },
          "description": "A map of entities defined in this authentication template. Object keys are\nused as entity identifiers, and by convention, should use `snake_case`.\n\nSee `AuthenticationTemplateEntity` for more information.",
          "type": "object"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this authentication\ntemplate (for use in user interfaces).",
          "type": "string"
        },
        "scenarios": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateScenario"
          },
          "description": "TODO: finish implementing scenarios\n\nScenarios describe a complete environment for testing the authentication\ntemplate under certain conditions. They are most useful for development,\nbut they can also be used to validate the template in generalized wallets.",
          "type": "object"
        },
        "scripts": {
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/AuthenticationTemplateScript"
              },
              {
                "$ref": "#/definitions/AuthenticationTemplateScriptUnlocking"
              },
              {
                "$ref": "#/definitions/AuthenticationTemplateScriptLocking"
              },
              {
                "$ref": "#/definitions/AuthenticationTemplateScriptTested"
              }
            ]
          },
          "description": "A map of scripts used in this authentication template. Object keys are used\nas script identifiers, and by convention, should use `snake_case`.",
          "type": "object"
        },
        "supported": {
          "description": "A list of supported AuthenticationVirtualMachines for this template.",
          "items": {
            "$ref": "#/definitions/AuthenticationVirtualMachineIdentifier"
          },
          "type": "array"
        },
        "version": {
          "description": "A number identifying the format of this AuthenticationTemplate.\nCurrently, this implementation requires `version` be set to `0`.",
          "enum": [
            0
          ],
          "type": "number"
        }
      },
      "required": [
        "entities",
        "scripts",
        "supported",
        "version"
      ],
      "type": "object"
    },
    "AuthenticationTemplateEntity": {
      "additionalProperties": false,
      "description": "An object describing the configuration for a particular entity within an\nauthentication template.",
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this entity.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this entity, e.g.:\n`Trusted Third-Party` (for use in user interfaces and error messages).",
          "type": "string"
        },
        "scripts": {
          "description": "An array of the `id`s of each script the entity must be capable of\ngenerating, e.g. each of the unlocking scripts this entity might use.\n\nProvided the necessary variables, any entity can construct any script, but\nthis option allows us to hint to more advanced wallets which scripts to\nrecommend to users. (Especially when many scripts require inter-entity\ncommunication initiated by a user.)\n\nIf not provided, this property is assumed to include all scripts in the\ntemplate.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "variables": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateVariable"
          },
          "description": "A map of variables which must be provided by this entity for use in the\ntemplate's scripts. Some variables are required before locking script\ngeneration, while some variables can or must be resolved only before\nunlocking script generation.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "AuthenticationTemplateScenario": {
      "additionalProperties": false,
      "description": "An object describing the configuration for a particular scenario within an\nauthentication template.",
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this scenario.",
          "type": "string"
        },
        "extends": {
          "description": "The identifier of the scenario which this scenario extends. Any properties\nnot defined in this scenario inherit from this parent scenario. By default,\nall scenarios extend the built-in default scenario.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this scenario, e.g.:\n`Trusted Third-Party`",
          "type": "string"
        },
        "variables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of variable IDs to scripts defining their values in this scenario.\nScripts are encoded in BTL, and have access to all other template scripts\nand variables. (However, cyclical references will produce an error at\ncompile time.)",
          "type": "object"
        }
      },
      "type": "object"
    },
    "AuthenticationTemplateScript": {
      "additionalProperties": false,
      "description": "An object describing the configuration for a particular script within an\nauthentication template.",
      "properties": {
        "name": {
          "description": "A single-line, human-readable name for this unlocking script (for use in\nuser interfaces).",
          "type": "string"
        },
        "script": {
          "description": "The script definition in BTL (Bitauth Templating Language).",
          "type": "string"
        }
      },
      "required": [
        "script"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptLocking": {
      "additionalProperties": false,
      "properties": {
        "lockingType": {
          "description": "Indicates if P2SH infrastructure should be used when producing bytecode\nrelated to this script. For more information on P2SH, see BIP16.\n\nWhen compiling locking scripts of type `p2sh`, the result will be placed in\na P2SH \"redeem script\" format:\n`OP_HASH160 <$(<lockingBytecode> OP_HASH160)> OP_EQUAL`\n\nWhen compiling unlocking scripts which unlock locking scripts of type\n`p2sh`, the result will be transformed into the P2SH unlocking format:\n`unlockingBytecode <lockingBytecode>` (where `lockingBytecode` is the\ncompiled bytecode of the locking script, without the \"redeem script\"\ntransformation.)\n\nThe presence of the `lockingType` property indicates that this script is a\nlocking script.\n\nUnless otherwise specified, all scripts are assumed to be `standard`.",
          "enum": [
            "standard",
            "p2sh"
          ],
          "type": "string"
        },
        "name": {
          "description": "A single-line, human-readable name for this unlocking script (for use in\nuser interfaces).",
          "type": "string"
        },
        "script": {
          "description": "The script definition in BTL (Bitauth Templating Language).",
          "type": "string"
        }
      },
      "required": [
        "script"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptTest": {
      "additionalProperties": false,
      "properties": {
        "check": {
          "description": "The script to evaluate after the script being tested. The test passes if\nthis script leaves only a 1 (ScriptNumber) on the stack.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this test (for use in\nuser interfaces).",
          "type": "string"
        },
        "setup": {
          "description": "A script to evaluate before the script being tested. This can be used to\npush values to the stack which are operated on by the inline script.",
          "type": "string"
        }
      },
      "required": [
        "check"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptTested": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "A single-line, human-readable name for this unlocking script (for use in\nuser interfaces).",
          "type": "string"
        },
        "script": {
          "description": "The script definition in BTL (Bitauth Templating Language).",
          "type": "string"
        },
        "tests": {
          "description": "One or more tests which can be used during development and during template\nvalidation to confirm the correctness of this inline script.",
          "items": {
            "$ref": "#/definitions/AuthenticationTemplateScriptTest"
          },
          "type": "array"
        }
      },
      "required": [
        "script"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptUnlocking": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "A single-line, human-readable name for this unlocking script (for use in\nuser interfaces).",
          "type": "string"
        },
        "script": {
          "description": "The script definition in BTL (Bitauth Templating Language).",
          "type": "string"
        },
        "timeLockType": {
          "description": "The expected type of time locks in this script.\n\nBecause `OP_CHECKLOCKTIMEVERIFY` reads from a transaction's `locktime`\nproperty, every input to a given transaction must share the same time lock\ntype. This differs from `OP_CHECKSEQUENCEVERIFY` in that each input has its\nown `sequenceNumber`, so compatibility is not required.\n\nIf a transaction includes multiple inputs using scripts with `timeLockType`\ndefined, and the types are not compatible, generation should fail.\n\nThe `timestamp` type indicates that the transaction's locktime is provided\nas a UNIX timestamp (the `locktime` value is greater than or equal to\n`500000000`).\n\nThe `height` type indicates that the transaction's locktime is provided as\na block height (the `locktime` value is less than `500000000`).\n\nIf `timeLockType` is undefined, the script is assumed to have no reliance\non absolute time locks.",
          "enum": [
            "timestamp",
            "height"
          ],
          "type": "string"
        },
        "unlocks": {
          "description": "The `id` of the script which can be unlocked by this script.\n\nThe presence of the `unlocks` property indicates that this script is an\nunlocking script, and the script it unlocks is a locking script.",
          "type": "string"
        }
      },
      "required": [
        "script"
      ],
      "type": "object"
    },
    "AuthenticationTemplateVariable": {
      "anyOf": [
        {
          "$ref": "#/definitions/HdKey"
        },
        {
          "$ref": "#/definitions/Key"
        },
        {
          "$ref": "#/definitions/WalletData"
        },
        {
          "$ref": "#/definitions/AddressData"
        }
      ]
    },
    "AuthenticationVirtualMachineIdentifier": {
      "description": "Allowable identifiers for Bitcoin virtual machine versions. Identifiers are\nbased upon the month the VM version became active on the specified chain.",
      "enum": [
        "BCH_2020_05",
        "BCH_2019_11",
        "BCH_2019_05",
        "BSV_2018_11",
        "BTC_2017_08"
      ],
      "type": "string"
    },
    "HdKey": {
      "additionalProperties": false,
      "properties": {
        "addressOffset": {
          "description": "The offset by which to increment the `addressIndex` provided in the\ncompilation data when deriving this `HdKey`. (Default: 0)\n\nThis is useful for deriving the \"next\" (`1`) or \"previous\" (`-1`) address\nto be used in the current compilation context.",
          "type": "number"
        },
        "description": {
          "description": "A single-line, human readable description for this variable (for use in\nuser interfaces).",
          "type": "string"
        },
        "hdPublicKeyDerivationPath": {
          "description": "The path to derive the entity's HD public key from the entity's master HD\nprivate key. By default, `m` (i.e. the entity's HD public key represents\nthe same node in the HD tree as its HD private key).\n\nThis can be used to specify another derivation path from which the\n`publicDerivationPath` begins, e.g. `m/0'/1'/2'`. See\n`publicDerivationPath` for details.\n\nThis path must begin with an `m` (private derivation) and be fixed – it\ncannot contain an `i` character to represent the address index, as a\ndynamic hardened path would require a new HD public key for each address.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this variable (for use\nin user interfaces).",
          "type": "string"
        },
        "privateDerivationPath": {
          "description": "The derivation path used to derive this `HdKey` from the owning entity's HD\nprivate key. By default, `m/i`.\n\nThis path uses the notation specified in BIP32 and the `i` character to\nrepresent the location of the `addressIndex`:\n\nThe first character must be `m` (private derivation), followed by sets of\n`/` and a number representing the child index used in the derivation at\nthat depth. Hardened derivation is represented by a trailing `'`, and\nhardened child indexes are represented with the hardened index offset\n(`2147483648`) subtracted. The `i` character is replaced with the value of\n`addressIndex` plus this `HdKey`'s `addressOffset`. If the `i` character is\nfollowed by `'`, the hardened index offset is added (`2147483648`) and\nhardened derivation is used.\n\nFor example, `m/0/1'/i'` uses 3 levels of derivation, with child indexes in\nthe following order:\n\n`derive(derive(derive(node, 0), 2147483648 + 1), 2147483648 + addressIndex + addressOffset)`\n\nBecause hardened derivation requires knowledge of the private key, `HdKey`\nvariables with `derivationPath`s which include hardened derivation cannot\nuse HD public derivation (the `hdPublicKeys` property in `CompilationData`).\nInstead, compilation requires the respective HD private key\n(`CompilationData.hdKeys.hdPrivateKeys`) or the fully-derived public key\n(`CompilationData.hdKeys.derivedPublicKeys`).",
          "type": "string"
        },
        "publicDerivationPath": {
          "description": "The derivation path used to derive this `HdKey`'s public key from the\nowning entity's HD public key. If not set, the public equivalent of\n`privateDerivationPath` is used. For the `privateDerivationPath` default of\n`m/i`, this is `M/i`.\n\nIf `privateDerivationPath` uses hardened derivation for some levels, but\nlater derivation levels use non-hardened derivation, `publicDerivationPath`\ncan be used to specify a public derivation path beginning from\n`hdPublicKeyDerivationPath` (i.e. `publicDerivationPath` should always be a\nnon-hardened segment of `privateDerivationPath` which follows\n`hdPublicKeyDerivationPath`).\n\nThe first character must be `M` (public derivation), followed by sets of\n`/` and a number representing the child index used in the non-hardened\nderivation at that depth.\n\nFor example, if `privateDerivationPath` is `m/0'/i`, it is not possible to\nderive the equivalent public key with only the HD public key `M`. (The path\n\"`M/0'/i`\" is impossible). However, given the HD public key for `m/0'`, it\nis possible to derive the public key of `m/0'/i` for any `i`. In this case,\n`hdPublicKeyDerivationPath` would be `m/0'` and `publicDerivationPath`\nwould be the remaining `M/i`.",
          "type": "string"
        },
        "type": {
          "description": "The `HdKey` (Hierarchical-Deterministic Key) type automatically manages key\ngeneration and mapping in a standard way. For greater control, use `Key`.",
          "enum": [
            "HdKey"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Key": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this variable (for use in\nuser interfaces).",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this variable (for use\nin user interfaces).",
          "type": "string"
        },
        "type": {
          "description": "The `Key` type provides fine-grained control over key generation and mapping.\nMost templates should instead use `HdKey`.\n\nAny HD (Hierarchical-Deterministic) derivation must be completed outside of\nthe templating system and provided at the time of use.",
          "enum": [
            "Key"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "WalletData": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this wallet data.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this wallet data.",
          "type": "string"
        },
        "type": {
          "description": "The `WalletData` type provides a static piece of data which should be\ncollected once and stored at the time of wallet creation. `WalletData`\nshould be persistent for the life of the wallet, rather than changing from\nlocking script to locking script.\n\nFor address-specific data, use `AddressData`.",
          "enum": [
            "WalletData"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    }
  }
}