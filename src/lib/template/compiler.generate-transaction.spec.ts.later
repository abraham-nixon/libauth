/* eslint-disable functional/no-expression-statement, @typescript-eslint/no-magic-numbers */
import test from 'ava';

import { createCompilerBCH } from './compiler';
/*
 * import { createAuthenticationProgramExternalStateCommonEmpty } from '../auth';
 * import { AuthenticationTemplate } from '../types';
 */

// prettier-ignore
const privkey = new Uint8Array([0xf8, 0x5d, 0x4b, 0xd8, 0xa0, 0x3c, 0xa1, 0x06, 0xc9, 0xde, 0xb4, 0x7b, 0x79, 0x18, 0x03, 0xda, 0xc7, 0xf0, 0x33, 0x38, 0x09, 0xe3, 0xf1, 0xdd, 0x04, 0xd1, 0x82, 0xe0, 0xab, 0xa6, 0xe5, 0x53]);

/*
 * const p2pkhTemplate: AuthenticationTemplate = {
 *   entities: {
 *     owner: {
 *       name: 'Owner',
 *       scripts: ['p2pkh_lock', 'unlock'],
 *       variables: {
 *         owner: {
 *           description: 'The private key which controls this wallet.',
 *           name: 'Key',
 *           type: 'Key'
 *         }
 *       }
 *     }
 *   },
 *   scripts: {
 *     p2pkh_lock: {
 *       name: 'P2PKH Lock',
 *       script:
 *         'OP_DUP\nOP_HASH160 <$( <owner.public_key> OP_HASH160\n)> OP_EQUALVERIFY\nOP_CHECKSIG'
 *     },
 *     unlock: {
 *       name: 'Unlock',
 *       script: '<owner.schnorr_signature.all_outputs>\n<owner.public_key>',
 *       unlocks: 'p2pkh_lock'
 *     }
 *   },
 *   supported: ['BCH_2019_05', 'BCH_2019_11', 'BSV_2018_11', 'BTC_2017_08'],
 *   version: 0
 * };
 */

// const p2pkh = await authenticationTemplateToCompilerBCH(p2pkhTemplate);

test('createCompilerBCH: generateTransaction', async t => {
  const p2pkh = await createCompilerBCH({
    scripts: {
      lock:
        'OP_DUP OP_HASH160 <$(<a.public_key> OP_HASH160)> OP_EQUALVERIFY OP_CHECKSIG',
      unlock: '<a.signature.all_outputs> <a.public_key>'
    },
    variables: {
      a: {
        type: 'Key'
      }
    }
  });

  const lock = p2pkh.generateBytecode('lock', {
    keys: { privateKeys: { a: privkey } }
  });

  t.deepEqual(1, 1);
});
