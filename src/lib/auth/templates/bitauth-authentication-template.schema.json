{
  "$ref": "#/definitions/AuthenticationTemplate",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AddressData": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this address data.",
          "type": "string"
        },
        "mock": {
          "description": "The BTL-encoded test value for this variable. This test value is used\nduring development and can provide validation when importing this template\ninto a new system.\n\nWhen testing, all variables for all entities are initialized to their\n`mock` and each unlocking script is tested against the locking script,\nensuring it is able to unlock it. For inline scripts, variables are also\ninitialized to their `mock`s when evaluating inline script tests.\n\nNote, `mock` is itself defined in BTL syntax, but mock scripts do not have\naccess to evaluations, other variables, or scripts. (Hex, BigInt, and UTF8\nliterals are permissible, as well as push notation and comments.)",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this address data.",
          "type": "string"
        },
        "type": {
          "description": "`AddressData` is the most low-level variable type. It must be collected\nand stored each time a script is generated (usually, a locking script).\n`AddressData` can include any type of data, and can be used in any way.\n\nFor more persistent data, use `WalletData`.",
          "enum": [
            "AddressData"
          ],
          "type": "string"
        }
      },
      "required": [
        "description",
        "name",
        "type"
      ],
      "type": "object"
    },
    "AuthenticationTemplate": {
      "additionalProperties": false,
      "description": "An `AuthenticationTemplate` (a.k.a. `BitAuth Template`) specifies a set of\nlocking scripts, unlocking scripts, and other information required to use a\ncertain authentication scheme. Templates fully describe wallets and protocols\nin a way that can be shared between software clients.",
      "properties": {
        "$schema": {
          "description": "The URI which identifies the JSON Schema used by this template. Try:\n`https://bitauth.com/schemas/authentication-template-v0.schema.json`\nto enable documentation, autocompletion, and validation in JSON documents.",
          "type": "string"
        },
        "description": {
          "description": "An optionally multi-line, free-form, human-readable description of this\nauthentication template (for use in user interfaces).",
          "type": "string"
        },
        "entities": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateEntity"
          },
          "description": "A mapping of entities defined in this authentication template. Object keys\nare used as entity identifiers, and by convention, should use `snake_case`.\n\nSee `AuthenticationTemplateEntity` for more information.",
          "type": "object"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this authentication\ntemplate (for use in user interfaces).",
          "type": "string"
        },
        "scripts": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateScript"
          },
          "description": "A mapping of scripts used in this authentication template. Object keys\nare used as script identifiers, and by convention, should use `snake_case`.",
          "type": "object"
        },
        "supported": {
          "description": "A list of supported AuthenticationVirtualMachines for this template.",
          "items": {
            "$ref": "#/definitions/AuthenticationVirtualMachineIdentifier"
          },
          "type": "array"
        },
        "version": {
          "description": "A number identifying the format of this AuthenticationTemplate.\nCurrently, this implementation requires `version` be set to `0`.",
          "enum": [
            0
          ],
          "type": "number"
        }
      },
      "required": [
        "entities",
        "scripts",
        "supported",
        "version"
      ],
      "type": "object"
    },
    "AuthenticationTemplateEntity": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this entity.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable identifier for this entity, e.g.:\n`Trusted Third-Party`",
          "type": "string"
        },
        "scripts": {
          "description": "An array of the `id`s of each script the entity must be capable of\ngenerating, e.g. each of the unlocking scripts this entity might use.\n\nProvided the necessary variables, any entity can construct any script, but\nthis option allows us to hint to more advanced wallets which scripts to\nrecommend to users. (Especially when many scripts require inter-entity\ncommunication initiated by a user.)\n\nIf not provided, this property is assumed to include all scripts in the\ntemplate.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "variables": {
          "additionalProperties": {
            "$ref": "#/definitions/AuthenticationTemplateVariable"
          },
          "description": "An array of variables which must be provided by this entity for use in the\nthis template's scripts. Some variables are required before locking script\ngeneration, while some variables can or must be resolved only before\nunlocking script generation.",
          "type": "object"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScript": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "A single-line, human-readable name for this unlocking script (for use in\nuser interfaces).",
          "type": "string"
        },
        "script": {
          "description": "The script definition in BitAuth Script.",
          "type": "string"
        },
        "tests": {
          "description": "One or more tests which can be used during development and during template\nvalidation to confirm the correctness of this inline script.",
          "items": {
            "$ref": "#/definitions/AuthenticationTemplateScriptTest"
          },
          "type": "array"
        },
        "unlocks": {
          "description": "The `id` of the script which can be unlocked by this script.\n\n(The presence of the `unlocks` property indicates that this script is an\nunlocking script, and the script it unlocks is a locking script.)",
          "type": "string"
        }
      },
      "required": [
        "script"
      ],
      "type": "object"
    },
    "AuthenticationTemplateScriptTest": {
      "additionalProperties": false,
      "properties": {
        "check": {
          "description": "The script to evaluate after the script being tested. The test passes if\nthis script leaves only a 1 (ScriptNumber) on the stack.",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this test (for use in\nuser interfaces).",
          "type": "string"
        },
        "setup": {
          "description": "A script to evaluate before the script being tested. This can be used to\npush values to the stack which are operated on by the inline script.",
          "type": "string"
        }
      },
      "required": [
        "check"
      ],
      "type": "object"
    },
    "AuthenticationTemplateVariable": {
      "anyOf": [
        {
          "$ref": "#/definitions/HDKey"
        },
        {
          "$ref": "#/definitions/Key"
        },
        {
          "$ref": "#/definitions/WalletData"
        },
        {
          "$ref": "#/definitions/AddressData"
        },
        {
          "$ref": "#/definitions/CurrentBlockTime"
        },
        {
          "$ref": "#/definitions/CurrentBlockHeight"
        }
      ]
    },
    "AuthenticationVirtualMachineIdentifier": {
      "enum": [
        "BCH_2019_05",
        "BCH_2019_11",
        "BSV_2018_11",
        "BTC_2017_08"
      ],
      "type": "string"
    },
    "CurrentBlockHeight": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this variable (for use in\nuser interfaces).",
          "type": "string"
        },
        "mock": {
          "description": "The BTL-encoded test value for this variable. This test value is used\nduring development and can provide validation when importing this template\ninto a new system.\n\nWhen testing, all variables for all entities are initialized to their\n`mock` and each unlocking script is tested against the locking script,\nensuring it is able to unlock it. For inline scripts, variables are also\ninitialized to their `mock`s when evaluating inline script tests.\n\nNote, `mock` is itself defined in BTL syntax, but mock scripts do not have\naccess to evaluations, other variables, or scripts. (Hex, BigInt, and UTF8\nliterals are permissible, as well as push notation and comments.)",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this variable (for use\nin user interfaces).",
          "type": "string"
        },
        "type": {
          "description": "The `CurrentBlockHeight` type provides the current block height as a Script\nNumber. This is useful when computing a height for OP_CHECKLOCKTIMEVERIFY\nwhich is relative to the height at the moment a script is created (usually,\na locking script).",
          "enum": [
            "CurrentBlockHeight"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "CurrentBlockTime": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this variable (for use in\nuser interfaces).",
          "type": "string"
        },
        "mock": {
          "description": "The BTL-encoded test value for this variable. This test value is used\nduring development and can provide validation when importing this template\ninto a new system.\n\nWhen testing, all variables for all entities are initialized to their\n`mock` and each unlocking script is tested against the locking script,\nensuring it is able to unlock it. For inline scripts, variables are also\ninitialized to their `mock`s when evaluating inline script tests.\n\nNote, `mock` is itself defined in BTL syntax, but mock scripts do not have\naccess to evaluations, other variables, or scripts. (Hex, BigInt, and UTF8\nliterals are permissible, as well as push notation and comments.)",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this variable (for use\nin user interfaces).",
          "type": "string"
        },
        "type": {
          "description": "The `CurrentBlockTime` type provides the current block time as a Script\nNumber. This is useful when computing a time for OP_CHECKLOCKTIMEVERIFY\nwhich is relative to the current time at the moment a script is created\n(usually, a locking script).\n\nTODO: not available, see: https://github.com/bitauth/bitauth-ide/issues/17",
          "enum": [
            "CurrentBlockTime"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "HDKey": {
      "additionalProperties": false,
      "description": "Separated from `AuthenticationTemplateVariableBase` to provide better\ncontextual TypeDocs.",
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this variable (for use in\nuser interfaces).",
          "type": "string"
        },
        "mock": {
          "description": "The BTL-encoded test value for this variable. This test value is used\nduring development and can provide validation when importing this template\ninto a new system.\n\nWhen testing, all variables for all entities are initialized to their\n`mock` and each unlocking script is tested against the locking script,\nensuring it is able to unlock it. For inline scripts, variables are also\ninitialized to their `mock`s when evaluating inline script tests.\n\nNote, `mock` is itself defined in BTL syntax, but mock scripts do not have\naccess to evaluations, other variables, or scripts. (Hex, BigInt, and UTF8\nliterals are permissible, as well as push notation and comments.)",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this variable (for use\nin user interfaces).",
          "type": "string"
        },
        "scriptDerivationHardened": {
          "description": "TODO: describe – this turns on/off hardening of the script derivation index:\n`m / template derivation index' / script derivation index[']`",
          "type": "boolean"
        },
        "templateDerivationHardened": {
          "description": "A \"hardened\" child key is derived using an extended *private key*, while a\nnon-hardened child key is derived using only an extended *public key*.\n\nNon-hardened keys are more useful for some templates, e.g. to allow for\nnew locking scripts to be generated without communicating new public keys\nbetween entities for each. **However, using a non-hardened key has critical\nsecurity implications.** If an attacker gains possession of both a parent\nextended *public key* and any child private key, the attacker can easily\nderive the parent extended *private key*, and with it, all hardened and\nnon-hardened child keys.\n\nBecause this security consideration should be evaluated for any template\nusing `HDKey`s, `derivationHardened` defaults to `true`.",
          "type": "boolean"
        },
        "templateDerivationIndex": {
          "description": "All `HDKey`s are hardened-derivations of the entity's root `HDKey`. The\nresulting branches are then used to generate child keys scripts:\n\n`m / template derivation index' / script derivation index`\n\nBy default, `derivationIndex` is `0`. For a single entity to use multiple\n`HDKey`s, a different `derivationIndex` must be used for each.\n\nFor greater control over key generation and mapping, use `Key`.",
          "type": "number"
        },
        "type": {
          "description": "The `HDKey` (Hierarchical-Deterministic Key) type automatically manages key\ngeneration and mapping in a standard way. For greater control, use `Key`.",
          "enum": [
            "HDKey"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Key": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this variable (for use in\nuser interfaces).",
          "type": "string"
        },
        "mock": {
          "description": "The BTL-encoded test value for this variable. This test value is used\nduring development and can provide validation when importing this template\ninto a new system.\n\nWhen testing, all variables for all entities are initialized to their\n`mock` and each unlocking script is tested against the locking script,\nensuring it is able to unlock it. For inline scripts, variables are also\ninitialized to their `mock`s when evaluating inline script tests.\n\nNote, `mock` is itself defined in BTL syntax, but mock scripts do not have\naccess to evaluations, other variables, or scripts. (Hex, BigInt, and UTF8\nliterals are permissible, as well as push notation and comments.)",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this variable (for use\nin user interfaces).",
          "type": "string"
        },
        "type": {
          "description": "The `Key` type provides fine-grained control over key generation and mapping.\nMost templates should instead use `HDKey`.\n\nAny HD (Hierarchical-Deterministic) derivation must be completed outside of\nthe templating system and provided at the time of use.",
          "enum": [
            "Key"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "WalletData": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A single-line, human readable description for this wallet data.",
          "type": "string"
        },
        "mock": {
          "description": "The BTL-encoded test value for this variable. This test value is used\nduring development and can provide validation when importing this template\ninto a new system.\n\nWhen testing, all variables for all entities are initialized to their\n`mock` and each unlocking script is tested against the locking script,\nensuring it is able to unlock it. For inline scripts, variables are also\ninitialized to their `mock`s when evaluating inline script tests.\n\nNote, `mock` is itself defined in BTL syntax, but mock scripts do not have\naccess to evaluations, other variables, or scripts. (Hex, BigInt, and UTF8\nliterals are permissible, as well as push notation and comments.)",
          "type": "string"
        },
        "name": {
          "description": "A single-line, Title Case, human-readable name for this wallet data.",
          "type": "string"
        },
        "type": {
          "description": "The `WalletData` type provides a static piece of data which should be\ncollected once and stored at the time of wallet creation. `WalletData`\nshould be persistent for the life of the wallet, rather than changing from\nlocking script to locking script.\n\nFor address-specific data, use `AddressData`.",
          "enum": [
            "WalletData"
          ],
          "type": "string"
        }
      },
      "required": [
        "description",
        "name",
        "type"
      ],
      "type": "object"
    }
  }
}